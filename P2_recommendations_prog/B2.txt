Q1) Please find the co-occurrence matrix and give top two recommendations for use 1 by doing matric vector multiplication.

Output of question1:

User ID : 1
Movie ID : 101 Rating :5.0
Movie ID : 102 Rating :3.0
Movie ID : 103 Rating :2.5
User ID : 2
Movie ID : 101 Rating :2.0
Movie ID : 102 Rating :2.5
Movie ID : 103 Rating :5.0
Movie ID : 104 Rating :2.0
User ID : 3
Movie ID : 101 Rating :2.5
Movie ID : 104 Rating :4.0
Movie ID : 105 Rating :4.5
Movie ID : 107 Rating :5.0
User ID : 4
Movie ID : 101 Rating :5.0
Movie ID : 103 Rating :3.0
Movie ID : 104 Rating :4.5
Movie ID : 106 Rating :4.0
User ID : 5
Movie ID : 101 Rating :4.0
Movie ID : 102 Rating :3.0
Movie ID : 103 Rating :2.0
Movie ID : 104 Rating :4.0
Movie ID : 105 Rating :3.5
Movie ID : 106 Rating :4.0
Movie ID : 101
Movie ID : 102
Movie ID : 103
Movie ID : 104
Movie ID : 105
Movie ID : 106
Movie ID : 107
 
 Co-Occurance Matrix 
5,  3,  4,  4,  2,  2,  1,  
3,  3,  3,  2,  1,  1,  0,  
4,  3,  4,  3,  1,  2,  0,  
4,  2,  3,  4,  2,  2,  1,  
2,  1,  1,  2,  2,  1,  1,  
2,  1,  2,  2,  1,  2,  0,  
1,  0,  0,  1,  1,  0,  1,  
 
 Weight Matrix 
5.0,  2.0,  2.5,  5.0,  4.0,  
3.0,  2.5,  0.0,  0.0,  3.0,  
2.5,  5.0,  0.0,  3.0,  2.0,  
0.0,  2.0,  4.0,  4.5,  4.0,  
0.0,  0.0,  4.5,  0.0,  3.5,  
0.0,  0.0,  0.0,  4.0,  4.0,  
0.0,  0.0,  5.0,  0.0,  0.0,  
 
 Matrix Multiplication Result 
44.0,  45.5,  42.5,  63.0,  68.0,  
31.5,  32.5,  20.0,  37.0,  42.5,  
39.0,  41.5,  26.5,  53.5,  56.5,  
33.5,  36.0,  40.0,  55.0,  59.0,  
15.5,  15.5,  27.0,  26.0,  32.0,  
18.0,  20.5,  17.5,  33.0,  34.5,  
5.0,  4.0,  16.0,  9.5,  11.5,  
 
 Final Recommendation for User 
User 1: 44.0 , 31.5 , 39.0 , 33.5 , 15.5 , 18.0 , 5.0 ,  Recommended => 104 Recommended => 106
User 2: 45.5 , 32.5 , 41.5 , 36.0 , 15.5 , 20.5 , 4.0 ,  Recommended => 106 Recommended => 105
User 3: 42.5 , 20.0 , 26.5 , 40.0 , 27.0 , 17.5 , 16.0 ,  Recommended => 103 Recommended => 102
User 4: 63.0 , 37.0 , 53.5 , 55.0 , 26.0 , 33.0 , 9.5 ,  Recommended => 102 Recommended => 105
User 5: 68.0 , 42.5 , 56.5 , 59.0 , 32.0 , 34.5 , 11.5 ,  Recommended => 107 Recommended => 107

Process finished with exit code 0

---------------------------------------------------------------------------------

Q2) Which of the following are continuous values, categorical values, word-like values, or text-like values: 
a) message length, --> continuous values
b) ZIP code, --> categorical values
c) car maker and model ID, --> word-like values
d) Boolean, --> categorical values
e) email address, --> text-like values
f) line numbers in a file. --> text-like values

---------------------------------------------------------------------------------

Q1) code for question1:


--> Datautil.java:

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;

/**
 * Created by Pooshan on 5/28/16.
 */
public class DataUtil {
    private static ArrayList<User> users = new ArrayList<User>();
    private static HashSet<Movie> movies = new HashSet<Movie>();
    private static int[][] coOccurrenceMatrix;
    private static int[] moviesList;
    private static int[] userList;
    private static float[][] weightMatrix;
    private static float c[][];

    public static User isUserAlredyPresent(User user) {
        Iterator<User> usersInterator = users.iterator();
        User userPresent = null;
        while (usersInterator.hasNext()) {
            User existingUser = usersInterator.next();
            if(existingUser.getUserID() == user.getUserID()) {
                // System.out.println("This user is already exist: " + usersInterator.next());
                userPresent = existingUser;
                break;
            }
        }
        return userPresent;
    }

    public static void updateUser(Movie movie, User user) {
        user.addMovie(movie);
    }

    public static void updateUser(HashSet<Movie> movies, User user) {
        user.getMovies().addAll(movies);
    }

    public static void addUser(User user){
        User existingUser = isUserAlredyPresent(user);
        if(null != existingUser ){
            updateUser(user.getMovies(), existingUser);
        }else {
            users.add(user);
        }
    }

    public static ArrayList<User> getUsers(){
        return users;
    }
    public static void addMovie(Movie movie){
        movies.add(movie);
    }

    public static HashSet<Movie> getMovies(){
        return movies;
    }

    public static int getTotalMovies(){
        return  movies.size();
    }

    private static void indexOfAllMovies(){
        moviesList = new int[movies.size()];
        int counter = 0;
        for(Movie movie : movies){
            moviesList[counter] = movie.getMovieID();
            counter++;
        }

    }

    private static void indexOfAllUsers(){
        userList = new int[users.size()];
        int counter = 0;
        for(User user : users){
            userList[counter] = user.getUserID();
            counter++;
        }
    }

    private static int findMoviePosition(int movieID){
        for(int i=0; i<moviesList.length;i++){
            if(moviesList[i] == movieID){
                return i;
            }
        }
        return -1;
    }

    private static int findUserPosition(int userID){
        for(int i=0; i<userList.length;i++){
            if(userList[i] == userID){
                return i;
            }
        }
        return -1;
    }

    public static void createCoOccuranceMatrix()
    {
        indexOfAllMovies();
        indexOfAllUsers();
        coOccurrenceMatrix = new int[getTotalMovies()][getTotalMovies()];
        for(User user: users){
            for(Movie movie: user.getMovies()){
                int position = findMoviePosition(movie.getMovieID());
                for (Movie moviein: user.getMovies()){
                int pos = findMoviePosition(moviein.getMovieID());
                coOccurrenceMatrix[position][pos] += 1;
                }
            }
        }
    }

    public static void printCooMatrix(){
        for (int i = 0; i < coOccurrenceMatrix[0].length; i++) {
            for (int j = 0; j < coOccurrenceMatrix[i].length;  j++) {
                System.out.print(coOccurrenceMatrix[i][j]+ ",  ");
            }
            System.out.println();
        }
    }

    public static void creatWeightMatrix(){
        indexOfAllUsers();
        indexOfAllMovies();
        weightMatrix = new float[getTotalMovies()][getUsers().size()];
        for (User user : users){
            int userPosition  = findUserPosition(user.getUserID());
            for(Movie movie: user.getMovies()){
                int moviePosition = findMoviePosition(movie.getMovieID());
                weightMatrix[moviePosition][userPosition] = movie.getRating();
            }
        }
    }

    public static void printWeightMatrix(){
        for (int i=0; i < movies.size(); i++){
            for(int j = 0; j < users.size(); j++){
                System.out.print(weightMatrix[i][j]+ ",  ");
            }
            System.out.println();
        }
    }


    public static void matrixMultiplication(){
         c = new float[getTotalMovies()][users.size()];
        for(int i = 0;i < getTotalMovies(); i++){
            for(int j = 0; j < users.size(); j++){
                c[i][j]=0;
                for(int k = 0; k < getTotalMovies(); k++){
                    c[i][j] += coOccurrenceMatrix[i][k] * weightMatrix[k][j];
                }
            }
        }
    }

    public static void printMatrixMultiplication(){
        for (int i=0; i < movies.size(); i++){
            for(int j = 0; j < users.size(); j++){
                System.out.print(c[i][j]+ ",  ");
            }
            System.out.println();
        }
    }

    public static void printFinalResult(){

        for(int i=0; i< users.size(); i++){
          System.out.print("User "+(i+1)+": ");
            float[] uArray = new float[getTotalMovies()];
            for(int j=0; j<getTotalMovies(); j++){
                System.out.print(c[j][i] + " , ");

                uArray[j] = c[j][i];
            }
            recommendMovie(uArray, users.get(i));
            System.out.println();
        }
    }

    private static void recommendMovie(float[] uArray, User user) {
        int recommendedMovie = -1;
        boolean isMovieFound = false;
        float[] newUArray = new float[uArray.length];
        for(int i=0; i<uArray.length; i++){
            newUArray[i] = uArray[i];
        }
        Arrays.sort(newUArray);
        int count = newUArray.length-1;
        float highestRatedMovie = newUArray[count];
        boolean hasAlreadySeen = false;
        int counter = 0;
        while(  counter < 2){
            int movieId = getMovieId(uArray, highestRatedMovie);
            hasAlreadySeen = false;
            for(Movie movie : user.getMovies()){
                if(movie.getMovieID() == movieId) {
                    if (count != 0) {
                        highestRatedMovie = newUArray[count - 1];
                        count --;
                        hasAlreadySeen = true;
                        break;
                    }
                }

            }
            if(!hasAlreadySeen &&  counter < 2) {
                Movie foundMovie = getMovie(movieId);
                recommendedMovie = movieId;
                counter++;
                //isMovieFound = true;
                user.addMovie(foundMovie);
                System.out.print(" Recommended => "+recommendedMovie);
            }
        }

    }

    private static Movie getMovie(int movieId) {
        for(Movie movie : movies){
            if(movie.getMovieID() == movieId){
                return movie;
            }
        }
        return null;
    }

    private static int getMovieId(float[] uArray, float highestRatedMovie) {
        int movieId = -1;
        for(int i =0; i<uArray.length; i++){
            if(uArray[i] == highestRatedMovie){
                movieId = moviesList[i];
                break;
            }
        }
        return movieId;
    }


--> Inputread.java

/**
 * Created by Pooshan on 5/28/16.
 */

import java.io.File;
        import java.io.FileNotFoundException;
        import java.util.Scanner;

public class inputRead {

    public static void main(String[] args) {
        // -define .csv file in app
        String fileNameDefined = "inputdata.csv";
        // -File class needed to turn stringName to actual file
        File file = new File(fileNameDefined);

        try{
            // -read from filePooped with Scanner class
            Scanner inputStream = new Scanner(file);
            // hashNext() loops line-by-line
            while(inputStream.hasNext()){
                //read single line, put in string
                String data = inputStream.next();
                //System.out.println(data + "  ");
                User user = new User(Integer.valueOf(data.split(",")[0]));
                Movie movie = new Movie(Integer.valueOf(data.split(",")[1]), Float.valueOf(data.split(",")[2]));
                user.addMovie(movie);
                DataUtil.addMovie(movie);
                DataUtil.addUser(user);


            }

            for(User user : DataUtil.getUsers()){
                System.out.println("User ID : "+user.getUserID());
                for(Movie movie : user.getMovies()){
                    System.out.println("Movie ID : "+movie.getMovieID()+" Rating :"+movie.getRating());
                }
            }

            for(Movie movie:DataUtil.getMovies()){
                System.out.println("Movie ID : "+movie.getMovieID());
            }

            System.out.println(" \n Co-Occurance Matrix ");
            DataUtil.createCoOccuranceMatrix();
            DataUtil.printCooMatrix();

            System.out.println(" \n Weight Matrix ");
            DataUtil.creatWeightMatrix();
            DataUtil.printWeightMatrix();

            System.out.println(" \n Matrix Multiplication Result ");
            DataUtil.matrixMultiplication();
            DataUtil.printMatrixMultiplication();

            System.out.println(" \n Final Recommendation for User ");
            DataUtil.printFinalResult();
            // after loop, close scanner
            inputStream.close();


        }catch (FileNotFoundException e){

            e.printStackTrace();
        }

    }
}


--> Movie.java

/**
 * Created by Pooshan on 5/28/16.
 */
public class Movie {
    int movieID;
    float rating;

    public Movie(int movieID, float rating){
        this.movieID = movieID;
        this.rating = rating;
    }

public int getMovieID(){
    return movieID;
}

public float getRating(){
    return rating;
}

    @Override
    public boolean equals(Object userObject){
        if(null != userObject && userObject instanceof Movie){
            Movie inputMovie = (Movie) userObject;

            if(inputMovie.getMovieID() == this.movieID){
                return true;
            }
        }
        return false;
    }

    @Override
    public int hashCode(){
        return movieID;
    }

}


--> User.java

import java.util.HashSet;

/**
 * Created by Pooshan on 5/28/16.
 */
public class User {
    private int userID;

    private HashSet<Movie> movies = new HashSet<Movie>();

    public int getUserID(){
        return userID;
    }
    public User(int userID){
        this.userID = userID;
    }

    public void addMovie(Movie movie){
        movies.add(movie);
    }

    public HashSet<Movie> getMovies(){
        return movies;
    }

    @Override
    public boolean equals(Object userObject){
        if(null != userObject && userObject instanceof User){
            User inputUser = (User) userObject;

            if(inputUser.getUserID() == this.userID){
                return true;
            }
        }
        return false;
    }

    @Override
    public int hashCode(){
        return userID;
    }
}
Software Requirements Elicitation
Software architecture




